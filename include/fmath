#pragma once

typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned int u32;
typedef unsigned long u64;

typedef char int8;
typedef int int32;
typedef short int16;
typedef unsigned long int64;

typedef unsigned int uint32;
typedef unsigned short uint16;
typedef unsigned long uint64;
typedef unsigned char uint8;

typedef unsigned long long size64;
typedef unsigned int size32;

#ifdef _WIN32
	#ifdef FRS_EXPORTS
		#define FRS_MATH_API __declspec(dllexport)
	#else
		#define FRS_MATH_API __declspec(dllimport)
	#endif
#else
	#define FRS_MATH_API
#endif

#define PI 3.14159265358979323846264338327950288f
#define PI2 6.28318530717958647692528676655900577f
#define PID2 1.57079632679489661923132169163975144f
#define PISQ 9.86960440108935861883449099987615114f

namespace frs {

	/* MATH STRUCT SECTION */

	struct FRS_MATH_API vec2 {
		float x, y = 0;

		vec2();
		vec2(const vec2& p_vec);
		vec2(const float p_x, const float p_y);

		float& operator [](u8 p_index);

		inline bool operator == (vec2 p_vec);
		inline bool operator != (vec2 p_vec);

		inline vec2 operator +(vec2 p_vec);
		inline void operator +=(vec2 p_vec);
		inline vec2 operator +(float p_num);
		inline void operator +=(float p_num);

		inline void operator++();

		inline vec2 operator -(vec2 p_vec);
		inline void operator -=(vec2 p_vec);
		inline vec2 operator -(float p_num);
		inline void operator -=(float p_num);

		inline void operator --();

		inline vec2 operator * (vec2 p_vec);
		inline void operator *= (vec2 p_vec);

		inline vec2 operator *(float p_num);
		inline void operator *= (float p_num);

		inline vec2 operator / (vec2 p_vec);
		inline void operator /= (vec2 p_vec);

		inline vec2 operator /(float p_num);
		inline void operator /= (float p_num);

		inline float length();
		inline vec2 normalize();

		static vec2 up;
		static vec2 down;
		static vec2 left;
		static vec2 right;

	};

	struct FRS_MATH_API vec3 : public vec2 {
		float z = 0;

		vec3();
		vec3(const float p_x, const  float p_y, const  float p_z);
		vec3(const vec2& p_vec, float p_z);

		float& operator[](u8 p_index);

		inline bool operator == (vec3 p_vec);
		inline bool operator != (vec3 p_vec);

		inline vec3 operator +(vec3 p_vec);
		inline void operator +=(vec3 p_vec);
		inline vec3 operator +(float p_num);
		inline void operator +=(float p_num);

		inline void operator++();

		inline vec3 operator -(vec3 p_vec);
		inline void operator -=(vec3 p_vec);
		inline vec3 operator -(float p_num);
		inline void operator -=(float p_num);

		inline void operator --();

		inline vec3 operator * (vec3 p_vec);
		inline void operator *= (vec3 p_vec);

		inline vec3 operator *(float p_num);
		inline void operator *= (float p_num);

		inline vec3 operator / (vec3 p_vec);
		inline void operator /= (vec3 p_vec);

		inline vec3 operator /(float p_num);
		inline void operator /= (float p_num);

		inline float length();
		inline vec3 normalize();
	};

	struct FRS_MATH_API vec4 : public vec3 {
		float w = 0;

		vec4();
		vec4(const float p_x, const  float p_y, 
			const float p_z, const float p_w);
		vec4(const vec3& p_vec, float p_w);

		float& operator[](u8 p_index);

		inline bool operator == (vec4 p_vec);
		inline bool operator != (vec4 p_vec);

		inline vec4 operator +(vec4 p_vec);
		inline void operator +=(vec4 p_vec);
		inline vec4 operator +(float p_num);
		inline void operator +=(float p_num);

		inline void operator++();

		inline vec4 operator -(vec4 p_vec);
		inline void operator -=(vec4 p_vec);
		inline vec4 operator -(float p_num);
		inline void operator -=(float p_num);

		inline void operator --();

		inline vec4 operator * (vec4 p_vec);
		inline void operator *= (vec4 p_vec);

		inline vec4 operator *(float p_num);
		inline void operator *= (float p_num);

		inline vec4 operator / (vec4 p_vec);
		inline void operator /= (vec4 p_vec);

		inline vec4 operator /(float p_num);
		inline void operator /= (float p_num);

		inline float length();
		inline vec4 normalize();
	};

	struct FRS_MATH_API mat4 {
		mat4();
		mat4(vec4 p_cols[4]);
		mat4(float p_floats[16]);

		inline mat4 operator +(mat4 p_mat);
		inline mat4 operator -(mat4 p_mat);
		inline mat4 operator *(mat4 p_mat);

		long determinant();

		mat4 inverse();
		mat4 transpose();

		mat4 translate(vec3 p_trans);
		mat4 rotate(float p_angle, vec3 p_dir);
		mat4 scale(float p_scale);

		vec4 cols[4];
	};

	struct FRS_MATH_API quaternion: public vec4 {
		quaternion();
		quaternion(float w, float x, float y, float z);

		quaternion operator * (quaternion p_quat);

		quaternion normalize();

		static quaternion euler(vec3 p_euler);
		static quaternion rotate(vec3 p_axis, float p_angle);

		operator mat4();
	};

	struct FRS_MATH_API point {
		float x, y;

		point();
		point(float p_x, float p_y);

		inline bool operator == (point p_point);
		inline bool operator != (point p_point);
	};

	struct FRS_MATH_API rect {
		float x, y;
		float width, height;

		rect();
		rect(float p_x, float p_y, float p_width, float p_height);

		bool contains(float p_x, float p_y) const;
		bool contains(point p_point) const;
		bool contains(rect p_rect) const;

		inline bool operator ==(rect p_rect);

		rect intersects(rect p_rect);
		
		void inflate(float p_inflate_width, float p_inflate_height);
		void offset(float p_new_x, float p_new_y);

		void offset(point p_point);
	};

	vec2 FRS_MATH_API abs(vec2 p_vec);
	vec3 FRS_MATH_API abs(vec3 p_vec);
	vec4 FRS_MATH_API abs(vec4 p_vec);

	vec2 FRS_MATH_API dot(vec2 p_vec, vec2 p_vec1);
	vec3 FRS_MATH_API dot(vec3 p_vec, vec3 p_vec1);
	vec4 FRS_MATH_API dot(vec4 p_vec, vec4 p_vec1);

	vec3 FRS_MATH_API cross(vec3 p_vec, vec3 p_vec1);

	vec2 FRS_MATH_API angle(vec2 p_vec, vec2 p_vec1);
	vec3 FRS_MATH_API angle(vec3 p_vec, vec3 p_vec1);
	vec4 FRS_MATH_API angle(vec4 p_vec, vec4 p_vec1);

	vec2 FRS_MATH_API reflect(vec2 p_inDir, vec2 p_inNorm);
	vec3 FRS_MATH_API reflect(vec3 p_inDir, vec3 p_inNorm);
	vec4 FRS_MATH_API reflect(vec4 p_inDir, vec4 p_inNorm);

	float FRS_MATH_API distance(vec2 p_start, vec2 p_end);
	float FRS_MATH_API distance(vec3 p_start, vec3 p_end);
	float FRS_MATH_API distance(vec4 p_start, vec4 p_end);

	float FRS_MATH_API exp(float x);
	float FRS_MATH_API log(float x);
	float FRS_MATH_API log2(float x);
	float FRS_MATH_API log(float x, float base);
	float FRS_MATH_API pow(float x, float y);

	float FRS_MATH_API abs(float p_num);
	float FRS_MATH_API clamp(float p_t1, float p_t2, float p_crrNumber);
	float FRS_MATH_API lerp(float p_t, float p_a, float p_b);

	int FRS_MATH_API sign(float p_num);

	float FRS_MATH_API sin(float p_num);
	float FRS_MATH_API cos(float p_num);
	float FRS_MATH_API tan(float p_num);
	float FRS_MATH_API cot(float p_num);

	void  FRS_MATH_API sin_cos(float p_x, float* p_s, float* p_c);
	
	float FRS_MATH_API asin(float p_num);
	float FRS_MATH_API acos(float p_num);
	float FRS_MATH_API atan(float p_num);
	float FRS_MATH_API atan2(float p_x, float p_y);
	float FRS_MATH_API maxf(float p_num, float p_num1);
	float FRS_MATH_API minf(float p_num, float p_num1);
	float FRS_MATH_API sqrt(float p_num);

	mat4 FRS_MATH_API  perspective_matrix(float p_zoom,
		vec2 p_extent, float p_zNear, float p_zFar);

	mat4 FRS_MATH_API  ortho_matrix(float p_left, float p_right, float p_bottom, float p_top,
		float p_zNear, float p_zFar);
}